generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  expires      DateTime
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?   @db.VarChar(255)
  role          Role      @default(USER)
  theme         Theme     @default(system)
  sessions      Session[]
  accounts      Account[]

  followers User[]     @relation("followers")
  following User[]     @relation("followers")
  snippets  Snippet[]
  votes     Vote[]
  favorites Favorite[]
  comments  Comment[]
  likes     Like[]
  actions   Action[]   @relation("action")
  events    Action[]

  createdAt DateTime @default(now())

  @@unique([id, name])
}

model Snippet {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.VarChar(255)
  code        String   @db.Text
  language    String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  basedOn     Snippet? @relation("refactor", fields: [basedOnId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  basedOnId   String?
  public      Boolean
  deleted     Boolean  @default(false)

  votes     Vote[]
  favorites Favorite[]
  refactors Snippet[]  @relation("refactor")
  comments  Comment[]
  events    Action[]

  createdAt DateTime @default(now())
}

model Vote {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  snippet   Snippet @relation(fields: [snippetId], references: [id])
  snippetId String

  createdAt DateTime @default(now())

  @@unique([userId, snippetId])
}

model Favorite {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  snippet   Snippet @relation(fields: [snippetId], references: [id])
  snippetId String

  createdAt DateTime @default(now())

  @@unique([userId, snippetId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String   @db.VarChar(1024)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  snippet   Snippet  @relation(fields: [snippetId], references: [id])
  snippetId String
  replyTo   Comment? @relation("reply", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId String?
  deleted   Boolean  @default(false)

  likes   Like[]
  replies Comment[] @relation("reply")
  events  Action[]

  createdAt DateTime @default(now())
}

model Like {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String

  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}

model Action {
  id         String     @id @default(cuid())
  user       User       @relation("action", fields: [userId], references: [id])
  userId     String
  actionType ActionType

  targetUser      User?    @relation(fields: [targetUserId], references: [id])
  targetUserId    String?
  targetSnippet   Snippet? @relation(fields: [targetSnippetId], references: [id])
  targetSnippetId String?
  targetComment   Comment? @relation(fields: [targetCommentId], references: [id])
  targetCommentId String?

  createdAt DateTime @default(now())

  @@unique([userId, targetUserId])
}

enum Role {
  ADMIN
  USER
}

enum ActionType {
  CREATE_SNIPPET
  REFACTOR_SNIPPET
  VOTE_SNIPPET
  FAVORITE_SNIPPET
  COMMENT_SNIPPET
  REPLY_COMMENT
  LIKE_COMMENT
  FOLLOW_USER
}

enum Theme {
  system
  light
  dark
}
